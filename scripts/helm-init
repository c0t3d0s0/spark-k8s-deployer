#!/bin/bash
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DEPLOY_ROOT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
export DEPLOY_ROOT_DIR
source "$DEPLOY_ROOT_DIR/src/common.bash"
export NODE_SELECTOR=${NODE_SELECTOR:-gitlab-ci}

init-rbac() {
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: ${KUBE_NAMESPACE}
  labels:
    app.kubernetes.io/name: spark-k8s-deployer
    app.kubernetes.io/component: deployer
    app.kubernetes.io/part-of: sparkfabrik
    app.kubernetes.io/managed-by: gitlab
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tiller-pv-manager
  labels:
    app.kubernetes.io/name: spark-k8s-deployer
    app.kubernetes.io/component: deployer
    app.kubernetes.io/part-of: sparkfabrik
    app.kubernetes.io/managed-by: gitlab
rules:
 - apiGroups: [""]
   resources: ["persistentvolumes"]
   verbs: ["create", "get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: tiller-manager-pv-${KUBE_NAMESPACE}
  labels:
    app.kubernetes.io/name: spark-k8s-deployer
    app.kubernetes.io/component: deployer
    app.kubernetes.io/part-of: sparkfabrik
    app.kubernetes.io/managed-by: gitlab
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:persistent-volume-provisioner
subjects:
- kind: ServiceAccount
  name: tiller
  namespace: ${KUBE_NAMESPACE}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tiller-manager
  namespace: ${KUBE_NAMESPACE}
  labels:
    app.kubernetes.io/name: spark-k8s-deployer
    app.kubernetes.io/component: deployer
    app.kubernetes.io/part-of: sparkfabrik
    app.kubernetes.io/managed-by: gitlab
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tiller-binding
  namespace: ${KUBE_NAMESPACE}
  labels:
    app.kubernetes.io/name: spark-k8s-deployer
    app.kubernetes.io/component: deployer
    app.kubernetes.io/part-of: sparkfabrik
    app.kubernetes.io/managed-by: gitlab
subjects:
- kind: ServiceAccount
  name: tiller
  namespace: ${KUBE_NAMESPACE}
roleRef:
  kind: Role
  name: tiller-manager
  apiGroup: rbac.authorization.k8s.io
EOF
}

helm-init() {
  kubectl create ns $KUBE_NAMESPACE || true
  init-rbac
  helm init --service-account tiller --node-selectors="cloud.google.com/gke-nodepool=${NODE_SELECTOR}" --tiller-namespace ${KUBE_NAMESPACE} --upgrade
  kubectl rollout status -w deployment/tiller-deploy --namespace=${KUBE_NAMESPACE}
  kubectl scale deployment tiller-deploy --replicas=1 --namespace=${KUBE_NAMESPACE}
  helm repo add sparkfabrik https://storage.googleapis.com/spark-helm-charts/
}

helm-init
